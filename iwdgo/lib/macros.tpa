INCLUDE ~%MOD_FOLDER%/lib/remapped_tis.tpa~

//ACTION_DEFINE_ASSOCIATIVE_ARRAY turn_off_anim_at_night BEGIN // to remove distracting animations of the maps
//		AR1200TN => BG1200
//		AR900WN1 => BG0900
//		AR900WN2 => BG0900
//		AR900WN4 => BG0900
//		AR900WD1 => BG0900
//END

ACTION_DEFINE_ASSOCIATIVE_ARRAY turn_off_at_night BEGIN // turn off sleeping animals at night
	bird => 1
	eagle => 1
	vultur => 1
	seagul => 1
	butrfly => 1
END


DEFINE_ACTION_FUNCTION ~SRHTLMLN~	// add to the bmp files
	STR_VAR
		type = ~~
BEGIN
	ACTION_IF ~%type%~ STR_EQ ~LN~ BEGIN
		OUTER_SPRINT folder ~%ee%~
	END ELSE BEGIN
		OUTER_SPRINT folder ~~
	END
	LAF ALTER_SEARCHMAP
		STR_VAR
			path_to_2da_file 	= EVAL ~%MOD_FOLDER%/base/bmp%type%/%folder%/%are%%type%.2da~ 
			areaname 			= EVAL ~%are2%~ // area name, e.g. ~AR3700~
			output_path			= EVAL ~%biffdir%~ // output directory
			type				= EVAL ~%type%~
	END
END

DEFINE_ACTION_FUNCTION ~BACKUP_BIFFING~ // for the uninstallation of the mod
	STR_VAR
		ext = ~~
BEGIN
	ACTION_IF FILE_EXISTS ~override/%are2%%ext%~ BEGIN
		MOVE ~override/%are2%%ext%~ ~%MOD_FOLDER%/backup_ovr~
	END
END

DEFINE_ACTION_FUNCTION COPY_TIS_PVRZ_BGGO
	STR_VAR
		tis_path_original   = ""
		tis_name_original   = "" // original tis-name
		tis_name_target     = "" // target tis-name. if tis_name_target = "" => tis_name_target = tis_name
		tis_path_target     = "override"
BEGIN
	ACTION_IF ( ~%tis_name_target%~ STR_EQ ~~ ) BEGIN OUTER_SPRINT tis_name_target ~%tis_name_original%~ END
	
	ACTION_CLEAR_ARRAY PVR_PAGE_LIST
	ACTION_CLEAR_ARRAY OFFSET_ARRAY
	
	LAF TIS_RES_TO_PVRZ STR_VAR tis_res = EVAL ~%tis_name_target%.tis~ RET prefix_target = prefix END
	LAF TIS_RES_TO_PVRZ STR_VAR tis_res = EVAL ~%tis_name_original%.tis~ RET prefix_original = prefix END
	
	ACTION_IF FILE_EXISTS_IN_GAME  ~%tis_name_target%.tis~ BEGIN
		COPY_EXISTING - ~%tis_name_target%.tis~ ~%temp%~
			READ_LONG 0x8  "tiles_cnt"
			READ_LONG 0x10 "tiles_off"
			READ_LONG 0xc  "tiles_length"
			FOR ( i = 0 ; i < tiles_cnt ; ++i ) BEGIN
				SET offset = tiles_off + tiles_length * i
				READ_LONG offset pvr_page_original
				PATCH_IF !(VARIABLE_IS_SET $PVR_PAGE_LIST("%pvr_page_original%")) BEGIN
					DEFINE_ASSOCIATIVE_ARRAY PVR_PAGE_LIST BEGIN "%pvr_page_original%", "old" => "%pvr_page_original%" END
				END
				// #1 Delete
//				INNER_ACTION BEGIN
//					ACTION_IF FILE_EXISTS_IN_GAME ~%prefix_original%%pvr_page_original%.PVRZ~ BEGIN
//						COPY_EXISTING ~%prefix_original%%pvr_page_original%.PVRZ~
//						DELETE ~override/%prefix_original%%pvr_page_original%.PVRZ~
//					END
//				END
			END
	END
	
	COPY ~%tis_path_original%/%tis_name_original%.tis~ ~%tis_path_target%/%tis_name_target%.tis~
		LPM ~DEBUG~
		READ_LONG 0x8  "tiles_cnt"
		READ_LONG 0x10 "tiles_off"
		READ_LONG 0xc  "tiles_length"
		FOR ( i = 0 ; i < tiles_cnt ; ++i ) BEGIN
			SET offset = tiles_off + tiles_length * i
			READ_LONG offset pvr_page_target
			PATCH_IF (pvr_page_target >= 0) BEGIN
				DEFINE_ASSOCIATIVE_ARRAY OFFSET_ARRAY BEGIN "%offset%" => "%pvr_page_target%" END
				PATCH_IF !(VARIABLE_IS_SET $PVR_PAGE_LIST("%pvr_page_target%" "old")) BEGIN
					DEFINE_ASSOCIATIVE_ARRAY PVR_PAGE_LIST BEGIN "%pvr_page_target%", "new" => "%pvr_page_target%" END
				END
			END
		END
		
		// delete überzählige pvrz indices
		// erst alle pvrz löschen #1 oder die überzähligen löschen #2
		LPF FIND_FREE_PVRZ_INDEX STR_VAR prefix = EVAL "%prefix_target%" RET free_index END
		SORT_ARRAY_INDICES PVR_PAGE_LIST NUMERICALLY
		PATCH_PHP_EACH PVR_PAGE_LIST AS idx => pvr_index BEGIN
			PATCH_IF ("%idx_1%" STR_EQ "new") BEGIN
				SET $PVR_PAGE_LIST("%idx_0%" "new") = free_index
				SET free_index +=1
			END
		END
		//#2 erst das max der neuen und dann max alt - max neu 
		
		PHP_EACH OFFSET_ARRAY AS offset => value BEGIN
			SET new_value = 0
			PATCH_IF ( VARIABLE_IS_SET $PVR_PAGE_LIST( ~%value%~ ~old~ ) ) BEGIN
				SET new_value = $PVR_PAGE_LIST( ~%value%~ ~old~ )
			END
			PATCH_IF ( VARIABLE_IS_SET $PVR_PAGE_LIST( ~%value%~ ~new~ ) ) BEGIN
				SET new_value = $PVR_PAGE_LIST( ~%value%~ ~new~ )
			END
			WRITE_LONG ~%offset%~ ~%new_value%~
		END
		
	ACTION_PHP_EACH PVR_PAGE_LIST AS source => dest BEGIN
			ACTION_IF ( source_0 < 10 ) BEGIN OUTER_SPRINT source_final ~0%source_0%~ END ELSE BEGIN OUTER_SPRINT source_final ~%source_0%~ END
			ACTION_IF ( dest   < 10 ) BEGIN OUTER_SPRINT dest_final   ~0%dest%~   END ELSE BEGIN OUTER_SPRINT dest_final   ~%dest%~   END
			ACTION_IF ( FILE_EXISTS ~%tis_path_original%/%prefix_original%%source_final%.PVRZ~ ) BEGIN
				COPY ~%tis_path_original%/%prefix_original%%source_final%.PVRZ~ ~%tis_path_target%/%prefix_target%%dest_final%.PVRZ~
			END
	END		
END


DEFINE_PATCH_MACRO ~RENAME_OVL_NAMES~ // replace ovl tis names automatically
BEGIN
	READ_LONG 0x08 ovl_num
	READ_LONG 0x10 ovl_off
	FOR (cnt=0; cnt<ovl_num; cnt+=1) BEGIN
		READ_ASCII ovl_off+cnt*0x18+0x04 tis_name
		PATCH_IF ~%tis_name%~ STR_EQ ~%are2%~ BEGIN
			WRITE_ASCIIE ovl_off+cnt*0x18+0x04 ~%are2%N~
		END
		INNER_PATCH_SAVE new_tis_name ~%tis_name%~ BEGIN
			REPLACE_TEXTUALLY EXACT_MATCH ~WT~ ~YS~
		END
		WRITE_ASCIIE ovl_off+cnt*0x18+0x04 ~%new_tis_name%~
	END
END

DEFINE_PATCH_MACRO ~CLEAR_ARRAY~
BEGIN
	CLEAR_ARRAY x_coord
	CLEAR_ARRAY y_coord
END

DEFINE_PATCH_MACRO ~DELETE_EXISTING_ANIMATIONS~ // to delete torches, candles ...
BEGIN
	// offset to rest encounters and songlist is 0. Adding empty table
	PATCH_IF debug BEGIN
		LPF animation_counter END 
	END
	PATCH_IF LONG_AT 0xc0 = 0 BEGIN
		WRITE_LONG 0xc0 BUFFER_LENGTH
		INSERT_BYTES BUFFER_LENGTH 0xe4
	END
	PATCH_IF LONG_AT 0xbc = 0 BEGIN
		WRITE_LONG 0xbc BUFFER_LENGTH
		INSERT_BYTES BUFFER_LENGTH 0x90
	END
	GET_OFFSET_ARRAY animation_array ARE_V10_ANIMATIONS
	PATCH_PHP_EACH animation_array AS animation_num => animation_offset BEGIN
		READ_SHORT animation_offset+0x20 animation_pos_x
		READ_SHORT animation_offset+0x22 animation_pos_y
		PATCH_IF ((~%animation_pos_x%~ = $x_coord("%index%")) AND (~%animation_pos_y%~ =  $y_coord("%index%"))) BEGIN
			LPF fj_are_structure INT_VAR fj_delete_mode = animation_num STR_VAR fj_structure_type = animation END
		END
	END
END

DEFINE_ACTION_FUNCTION ~INSTALL_TILESETS~
	INT_VAR
		debug = 0
	STR_VAR
		purple = ~~
		file_list = EVAL ~%file_list%~ 
		wed_list = EVAL  ~%wed_list%~
	RET file_list
		wed_list
BEGIN
	
	ACTION_IF (VARIABLE_IS_SET $EVAL ~remapped_tis~(~%are%~) OR FILE_EXISTS_IN_GAME ~%are%.are~) BEGIN

		OUTER_TEXT_SPRINT are2 $EVAL ~remapped_tis~(~%are%~)
		PRINT ~%are% ==> %are2%~
		
		ACTION_IF debug BEGIN
			OUTER_SPRINT file_list ~%file_list%%LNL%%seperator%%LNL%%are%%LNL%~
		END
		ACTION_IF FILE_EXISTS_IN_GAME ~%are2%.are~ BEGIN
			
			// Extended night & creatures sleep at night
			COPY_EXISTING ~%are2%.are~ ~override~
			PATCH_IF SOURCE_SIZE > 0x11b BEGIN // Valid size check
				PATCH_IF (((BYTE_AT 0x48) << 7) & BIT7) BEGIN // Toggle only outdoor areas
					WRITE_BYTE 0x48 (THIS | BIT6 | BIT1 | BIT2) // Toggle extended night flag (BIT6) and day/night flag (BIT1) and weather flag (BIT2)
					GET_OFFSET_ARRAY actors 0x54 4 0x58 2 0 0 0x110		// turn off creatures at night time
					PHP_EACH actors AS i => off BEGIN
						READ_ASCII off + 0x80 cre_resref
						TO_LOWER cre_resref
						PATCH_IF VARIABLE_IS_SET $turn_off_at_night("%cre_resref%") BEGIN
							WRITE_LONG off + 0x40 0x1ffe0 // 05:30 to 17:29
						END
					END
					GET_OFFSET_ARRAY animations 0xb0 4 0xac 4 0 0 0x4c	// turn off animations at night time
					PHP_EACH animations AS i => off BEGIN
						READ_ASCII off + 0x0028 animation
						TO_UPPER animation
						PATCH_IF VARIABLE_IS_SET $turn_off_anim_at_night("%animation%") BEGIN
							WRITE_LONG off+0x34 0x00
						END
						
					END
				END
				PATCH_IF FILE_EXISTS ~%MOD_FOLDER%/base/are_patch/%are%_are.tpa~ BEGIN // add animation for braziers, candles ...
					PATCH_INCLUDE ~%MOD_FOLDER%/base/are_patch/%are%_are.tpa~
				END
			END
			BUT_ONLY
			
			// Get files from compressed biffs
			//code by Argent77 https://github.com/Argent77/A7-BiffedAreasFix
			LAF a7#get_are_resources
				INT_VAR
					compressed_only = 1
					bmp = 1
					mos = 1
					tis = 1
					wav = 1
					wed = 1
				STR_VAR
					are_regexp = EVAL "^%are2%\.are$"
				RET_ARRAY
					resources
				END
			ACTION_PHP_EACH resources AS resource => ref_count BEGIN
				COPY_EXISTING ~%resource%~ ~override~ IF_EXISTS
			END
			ACTION_CLEAR_ARRAY resources
			
			// biff only areas with tis and pvrz files
			OUTER_SET area_biff = 0
			ACTION_IF  (FILE_EXISTS ~%MOD_FOLDER%/base/tbcD/%are%/%ee%/%are%.tbc~ 
						OR FILE_EXISTS ~%MOD_FOLDER%/base/tbcD/%are%/%ee%/%are%.tis~ 
						OR FILE_EXISTS ~%MOD_FOLDER%/base/tbcN/%are%/%ee%/%are%N.tbc~ 
						OR FILE_EXISTS ~%MOD_FOLDER%/base/tbcN/%are%/%ee%/%are%N.tis~) BEGIN
				MKDIR ~%MOD_FOLDER%/bif/%are2%~
				OUTER_SPRINT biffdir ~%MOD_FOLDER%/bif/%are2%~
				OUTER_SET area_biff = 1
			END ELSE BEGIN
				OUTER_SPRINT biffdir ~%MOD_FOLDER%/bif/goMAIN~
			END
			OUTER_SPRINT temp ~%MOD_FOLDER%/bif/temp~
			
			// biff only day or night files with the tis areas
			OUTER_SET day = 0
			OUTER_SET night = 0
			
			//**************************************************
			// Day files
			//**************************************************
			
			// day tis v1 or tis v2 file 
			
			ACTION_IF (FILE_EXISTS ~%MOD_FOLDER%/base/tbcD/%are%/%ee%/%are%.tbc~ OR FILE_EXISTS ~%MOD_FOLDER%/base/tbcD/%are%/%ee%/%are%.tis~) BEGIN
				ACTION_IF GAME_IS ~iwd how totlm iwd2~ BEGIN
					ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/tbcD/%are%/%ee%/%are%.tbc~ BEGIN
						LAF HANDLE_TILECONV
							STR_VAR
								input_path    = EVAL ~%MOD_FOLDER%/base/tbcD/%are%/%ee%~
								output_path	  = EVAL ~%temp%~
						END
						COPY_LARGE ~%temp%/%are%.tis~ ~%biffdir%/%are2%.tis~
						OUTER_PATCH ~~ BEGIN LPM ~DEBUG~ END
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~.tis~ END
					END
					ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/tbcD/%are%/%ee%/%are%.tis~ BEGIN	// some areas have artefacts during compression, no tbc file
						COPY_LARGE ~%MOD_FOLDER%/base/tbcD/%are%/%ee%/%are%.tis~ ~%biffdir%/%are2%.tis~
						OUTER_PATCH ~~ BEGIN LPM ~DEBUG~ END
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~.tis~ END
					END
				END
				ACTION_IF GAME_IS ~iwdee~ OR iwd1_eet = 1 OR iwd2_eet = 1 BEGIN
					ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/tbcD/%are%/%ee%/%are%.tis~ BEGIN
						LAF COPY_TIS_PVRZ_BGGO
							STR_VAR
								tis_path_original   = EVAL "%MOD_FOLDER%/base/tbcD/%are%/%ee%"
								tis_name_original   = EVAL "%are%"
								tis_name_target     = EVAL "%are2%"
								tis_path_target     = EVAL "%biffdir%"
						END
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~.tis~ END
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~.pvrz~ END
					END
				END
				OUTER_SET day = 1
			END
			
			// day mos file
			
			ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/mbcD/%ee%/%are%/%are%.mos~ BEGIN
				COPY ~%MOD_FOLDER%/base/mbcD/%ee%/%are%/%are%.mos~ ~%biffdir%/%are2%.mos~
					LPM ~DEBUG~
				LAF ~BACKUP_BIFFING~ STR_VAR ext = ~.mos~ END
			END ELSE BEGIN
				ACTION_TRY
					ACTION_IF (area_biff = 1) AND (day = 1) BEGIN
						COPY_EXISTING ~%are2%.mos~ ~%biffdir%~
						LPM ~DEBUG~
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~.mos~ END
					END
				WITH
					DEFAULT
						PRINT ~Couldn't extract %are%.mos from bif~
				END
			END
			
			// day lightmap
			ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/bmpLM/%are%LM.2da~ BEGIN
				LAF ~SRHTLMLN~ STR_VAR type = ~LM~ END
				LAF ~BACKUP_BIFFING~ STR_VAR ext = ~LM.bmp~ END
			END ELSE BEGIN
				ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/bmpLM/%are%LM.bmp~ BEGIN
					COPY ~%MOD_FOLDER%/base/bmpLM/%are%LM.bmp~ ~%biffdir%/%are2%LM.bmp~
						LPM ~DEBUG~
					LAF ~BACKUP_BIFFING~ STR_VAR ext = ~LM.bmp~ END
					END ELSE BEGIN
					ACTION_IF (area_biff = 1) AND (day = 1) BEGIN
						COPY_EXISTING ~%are2%LM.bmp~ ~%biffdir%~
							LPM ~DEBUG~
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~LM.bmp~ END
					END
				END
			END
			
			// day wed file
			
			ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/wedD/%ee%/%are%.wed~ BEGIN
				COPY ~%MOD_FOLDER%/base/wedD/%ee%/%are%.wed~ ~%biffdir%/%are2%.wed~
					REPLACE_TEXTUALLY ~%are%~ ~%are2%~
					PATCH_IF FILE_EXISTS ~%MOD_FOLDER%/base/wed_patch/%are%_wed.tpa~ BEGIN
						PATCH_INCLUDE ~%MOD_FOLDER%/base/wed_patch/%are%_wed.tpa~
					END
					LPM ~DEBUG~
				LAF ~BACKUP_BIFFING~ STR_VAR ext = ~.wed~ END
			END ELSE BEGIN
				ACTION_IF (area_biff = 1) AND (day = 1) BEGIN
					COPY_EXISTING ~%are2%.wed~ ~%biffdir%~
						LPM ~DEBUG~
					LAF ~BACKUP_BIFFING~ STR_VAR ext = ~.wed~ END
				END
			END
			
			OUTER_SET day = 0

			//**************************************************
			// Night files
			//**************************************************
			
			ACTION_IF debug BEGIN
				OUTER_SPRINT file_list ~%file_list%%LNL%%TAB%~
			END
			
			// night tis v1 or tis v2
			
			ACTION_IF (FILE_EXISTS ~%MOD_FOLDER%/base/tbcN/%are%/%ee%/%are%N.tbc~ OR FILE_EXISTS ~%MOD_FOLDER%/base/tbcN/%are%/%ee%/%are%N.tis~) BEGIN
				ACTION_IF GAME_IS ~iwd how totlm iwd2~ BEGIN
					ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/tbcN/%are%/%ee%/%are%N.tbc~ BEGIN
						LAF HANDLE_TILECONV
							STR_VAR
								input_path    = EVAL ~%MOD_FOLDER%/base/tbcN/%are%/%ee%~
								output_path	  = EVAL ~%temp%~
						END
						COPY_LARGE ~%temp%/%are%N.tis~ ~%biffdir%/%are2%N.tis~
						OUTER_PATCH ~~ BEGIN LPM ~DEBUG~ END
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~N.tis~ END
					END
					ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/tbcN/%are%/%ee%/%are%N.tis~ BEGIN // some areas have artefacts during compression, no tbc file
						COPY_LARGE ~%MOD_FOLDER%/base/tbcN/%are%/%ee%/%are%N.tis~ ~%biffdir%/%are2%N.tis~
						OUTER_PATCH ~~ BEGIN LPM ~DEBUG~ END
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~N.tis~ END
					END
				END
				ACTION_IF GAME_IS ~iwdee~ OR iwd1_eet = 1 OR iwd2_eet = 1 BEGIN
					ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/tbcN/%are%/%ee%/%are%N.tis~ BEGIN
						LAF COPY_TIS_PVRZ_BGGO
							STR_VAR
								tis_path_original   = EVAL "%MOD_FOLDER%/base/tbcN/%are%/%ee%"
								tis_name_original   = EVAL "%are%N"
								tis_name_target     = EVAL "%are2%N"
								tis_path_target     = EVAL "%biffdir%"
						END
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~.tis~ END
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~.pvrz~ END
					END
				END
				OUTER_SET night = 1
			END
			
			// night mos
			ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/mbcN/%ee%/%are%N/%are%N.mos~ BEGIN						
				COPY ~%MOD_FOLDER%/base/mbcN/%ee%/%are%N/%are%N.mos~ ~%biffdir%/%are2%N.mos~
					LPM ~DEBUG~
				LAF ~BACKUP_BIFFING~ STR_VAR ext = ~N.mos~ END
			END ELSE BEGIN
				ACTION_IF (area_biff = 1) AND (night = 1) BEGIN
					ACTION_IF FILE_EXISTS_IN_GAME ~%are2%N.mos~ BEGIN
						ACTION_TRY
							COPY_EXISTING ~%are2%N.mos~ ~%biffdir%~
								LPM ~DEBUG~
							LAF ~BACKUP_BIFFING~ STR_VAR ext = ~N.mos~ END
						WITH
							DEFAULT
								PRINT ~Couldn't copy %are%N.mos from bif file~
						END
					END ELSE BEGIN
						ACTION_TRY
							COPY_EXISTING ~%are2%.mos~ ~%biffdir%/%are2%N.mos~
								LPM ~DEBUG~
							LAF ~BACKUP_BIFFING~ STR_VAR ext = ~N.mos~ END
						WITH
							DEFAULT
								PRINT ~Couldn't copy %are%.mos to %are%N.mos from bif file~
						END
					END
				END
			END
			
			// night lightmap
			ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/bmpLN/%are%LN.2da~ BEGIN
				LAF ~SRHTLMLN~ STR_VAR type = ~LN~ END
				LAF ~BACKUP_BIFFING~ STR_VAR ext = ~LN.bmp~ END
			END ELSE BEGIN
				ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/bmpLN/%are%LN.bmp~ BEGIN
					LAF ~BACKUP_BIFFING~ STR_VAR ext = ~LN.bmp~ END
					COPY ~%MOD_FOLDER%/base/bmpLN/%are%LN.bmp~ ~%biffdir%/%are2%LN.bmp~
						LPM ~DEBUG~
					END ELSE BEGIN
					ACTION_IF (area_biff = 1) AND (night = 1) BEGIN
						ACTION_IF FILE_EXISTS_IN_GAME ~%are2%LN.bmp~ BEGIN
							COPY_EXISTING ~%are2%LN.bmp~ ~%biffdir%~
								LPM ~DEBUG~
							LAF ~BACKUP_BIFFING~ STR_VAR ext = ~LN.bmp~ END
						END ELSE BEGIN
							COPY_EXISTING ~%are2%LM.bmp~ ~%biffdir%/%are2%LN.bmp~
								LPM ~DEBUG~
							LAF ~BACKUP_BIFFING~ STR_VAR ext = ~LN.bmp~ END
						END
					END
				END
			END
			
			// night wed
			
			ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/wedN/%ee%/%are%N.wed~ BEGIN
				COPY ~%MOD_FOLDER%/base/wedN/%ee%/%are%N.wed~ ~%biffdir%/%are2%N.wed~
					REPLACE_TEXTUALLY ~%are%~ ~%are2%~
					PATCH_IF FILE_EXISTS ~%MOD_FOLDER%/base/wed_patch/%are%_wed.tpa~ BEGIN
						PATCH_INCLUDE ~%MOD_FOLDER%/base/wed_patch/%are%_wed.tpa~
					END
					LPM ~DEBUG~
				LAF ~BACKUP_BIFFING~ STR_VAR ext = ~N.wed~ END
			END ELSE BEGIN
				ACTION_IF (area_biff = 1) AND (night = 1) BEGIN
					ACTION_IF FILE_EXISTS_IN_GAME ~%are2%N.wed~ BEGIN
						COPY_EXISTING + ~%are2%N.wed~ ~%biffdir%~
							LPM ~DEBUG~
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~N.wed~ END
					END ELSE BEGIN
						COPY_EXISTING + ~%are2%.wed~ ~%biffdir%/%are2%N.wed~
							WRITE_BYTE 0x2a 0x4e // add the N to the area name 
							LPM ~RENAME_OVL_NAMES~ // change known ovl from WT to YS
							LPM ~DEBUG~
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~N.wed~ END
					END
				END
			END
			
			// searchmap
			
			ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/bmpSR/%are%SR.2da~ BEGIN // changes to existing SR
				LAF ~SRHTLMLN~ STR_VAR type = ~SR~ END
				LAF ~BACKUP_BIFFING~ STR_VAR ext = ~SR.bmp~ END
			END ELSE BEGIN
				ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/bmpSR/%are%SR.bmp~ BEGIN // complete new SR
					COPY ~%MOD_FOLDER%/base/bmpSR/%are%SR.bmp~ ~%biffdir%/%are2%SR.bmp~
						LPM ~DEBUG~
					LAF ~BACKUP_BIFFING~ STR_VAR ext = ~SR.bmp~ END
					END ELSE BEGIN
					ACTION_IF (area_biff = 1)  BEGIN
						COPY_EXISTING ~%are2%SR.bmp~ ~%biffdir%~ // existing SR
							LPM ~DEBUG~
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~SR.bmp~ END
					END
				END
			END
								
			// heightmap
			ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/bmpHT/%are%HT.2da~ BEGIN
				LAF ~SRHTLMLN~ STR_VAR type = ~HT~ END
				LAF ~BACKUP_BIFFING~ STR_VAR ext = ~HT.bmp~ END
			END ELSE BEGIN
				ACTION_IF FILE_EXISTS ~%MOD_FOLDER%/base/bmpHT/%are%HT.bmp~ BEGIN
					COPY ~%MOD_FOLDER%/base/bmpHT/%are%HT.bmp~ ~%biffdir%/%are2%HT.bmp~
						LPM ~DEBUG~
					LAF ~BACKUP_BIFFING~ STR_VAR ext = ~HT.bmp~ END
					END ELSE BEGIN
					ACTION_IF (area_biff = 1) BEGIN
						COPY_EXISTING ~%are2%HT.bmp~ ~%biffdir%~
							LPM ~DEBUG~
						LAF ~BACKUP_BIFFING~ STR_VAR ext = ~HT.bmp~ END
					END
				END
			END
			
			OUTER_SET night = 0
			
			// biffing
			ACTION_IF (area_biff = 1) BEGIN
				MAKE_BIFF ~go%are2%~ BEGIN ~%biffdir%~ ~^.*$~ END
			END
			
			ACTION_IF debug BEGIN
				COPY ~.../debug_include.tpa~ ~%temp%~
				REINCLUDE ~%temp%/debug_include.tpa~
			END
			
		END
	END
END
				
DEFINE_ACTION_FUNCTION ~INSTALL_MAIN~
	INT_VAR debug = 0
BEGIN
	MKDIR ~%MOD_FOLDER%/bif~	
	MKDIR ~%MOD_FOLDER%/bif/goiwdMAIN~
	MKDIR ~%MOD_FOLDER%/bif/temp~
	MKDIR ~%MOD_FOLDER%/backup_ovr~
	
	// tis files for water overlays
	ACTION_BASH_FOR ~%MOD_FOLDER%/base/tbcN/ys~ ~^.+\.tis$~ BEGIN
		ACTION_IF NOT FILE_EXISTS_IN_GAME ~%BASH_FOR_FILE%~ BEGIN
			COPY + ~%MOD_FOLDER%/base/tbcN/ys/%BASH_FOR_FILE%~ ~%MOD_FOLDER%/bif/goMAIN~
		END
	END
	
	// bam animations
	ACTION_BASH_FOR ~%MOD_FOLDER%/base/bam~ ~^.+\.bam$~ BEGIN
		COPY + ~%MOD_FOLDER%/base/bam/%BASH_FOR_FILE%~ ~%MOD_FOLDER%/bif/goMAIN~
	END
	
	//	IWD1 Areas
	ACTION_IF GAME_IS ~iwd how totlm iwdee~ OR iwd1_eet = 1 BEGIN
		PRINT ~IWD1 Areas~
		ACTION_PHP_EACH iwd1_areas AS idx => are BEGIN
			LAF ~INSTALL_TILESETS~ 
			INT_VAR debug = ~%debug%~ 
			STR_VAR file_list = EVAL ~%file_list%~ wed_list = EVAL ~%wed_list%~ 
			RET file_list wed_list END 
		END
	END
	
	// HoW
	ACTION_IF GAME_IS ~how totlm iwdee~ OR iwd1_eet = 1 BEGIN
		PRINT ~HoW~
		ACTION_PHP_EACH iwd1_how AS idx => are BEGIN
			LAF ~INSTALL_TILESETS~ 
			INT_VAR debug = ~%debug%~ 
			STR_VAR file_list = EVAL ~%file_list%~ wed_list = EVAL ~%wed_list%~ 
			RET file_list wed_list END 
		END
	END
	
	// TotLM
	ACTION_IF GAME_IS ~totlm iwdee~ OR iwd1_eet = 1 BEGIN
		PRINT ~TotLM~
		ACTION_PHP_EACH iwd1_totlm AS idx => are BEGIN
			LAF ~INSTALL_TILESETS~ 
			INT_VAR debug = ~%debug%~ 
			STR_VAR file_list = EVAL ~%file_list%~ wed_list = EVAL ~%wed_list%~ 
			RET file_list wed_list END 
		END
	END
	
	// IWD2 Areas
	ACTION_IF GAME_IS ~iwd2~ OR iwd2_eet = 1 BEGIN
		PRINT ~IWD2~
		ACTION_PHP_EACH iwd2_areas AS idx => are BEGIN
			LAF ~INSTALL_TILESETS~ 
			INT_VAR debug = ~%debug%~ 
			STR_VAR file_list = EVAL ~%file_list%~ wed_list = EVAL ~%wed_list%~ 
			RET file_list wed_list END 
		END
	END
	
	MAKE_BIFF ~goiwdMAIN~ BEGIN ~%MOD_FOLDER%/bif/goiwdMAIN~ ~^.*$~ END
	
	// create the log files
	ACTION_IF debug BEGIN
		PRINT ~The log files debug.log and all_files.log are in the %MOD_FOLDER%/ directory~
		<<<<<<<< .../debug.log
		>>>>>>>>
		LAM ~COMPLETE_LIST_OF_FILES~
		COPY ~.../debug.log~ ~%MOD_FOLDER%/debug.log~
		APPEND_OUTER + ~%MOD_FOLDER%/debug.log~ ~%file_list%~
		APPEND_OUTER + ~%MOD_FOLDER%/debug.log~ ~%wed_list%~
	END	
	
END


